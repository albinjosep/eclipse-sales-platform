'use client';

import React, { useState } from 'react';
import { BarChart3, PieChart, LineChart, TrendingUp, TrendingDown, DollarSign, Users, Target, Calendar, Download, Filter, RefreshCw, MessageSquare, Send, Brain, Zap, Eye, ArrowUp, ArrowDown, Minus, ChevronDown, Search, FileText, Share } from 'lucide-react';

interface AIResponse {
  question: string;
  answer: string;
  confidence: number;
  timestamp: string;
}

const ReportsWireframe = () => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('month');
  const [selectedReport, setSelectedReport] = useState('overview');
  const [aiQuery, setAiQuery] = useState('');
  const [showAIChat, setShowAIChat] = useState(false);
  const [aiResponses, setAiResponses] = useState<AIResponse[]>([]);

  const aiNarrative = {
    summary: "Revenue grew 12% vs last week, but deal size is shrinking",
    insights: [
      "Your revenue increased by $145K this month, driven primarily by enterprise deals closing faster than expected.",
      "However, average deal size dropped 8% from $85K to $78K, indicating a shift toward smaller customers.",
      "Lead quality improved significantly with 23% higher conversion rates, but total lead volume decreased by 15%.",
      "The sales cycle shortened by 5 days on average, suggesting better qualification and follow-up processes."
    ],
    recommendations: [
      "Focus on upselling existing customers to increase deal size",
      "Investigate why enterprise leads are converting to smaller deals",
      "Capitalize on improved conversion rates by increasing lead generation efforts"
    ],
    confidence: 94
  };

  const kpiData = [
    {
      title: 'Total Revenue',
      value: '$1.2M',
      change: '+12%',
      trend: 'up',
      period: 'vs last month',
      target: '$1.5M',
      progress: 80
    },
    {
      title: 'Deals Closed',
      value: '47',
      change: '+8%',
      trend: 'up',
      period: 'vs last month',
      target: '60',
      progress: 78
    },
    {
      title: 'Average Deal Size',
      value: '$78K',
      change: '-8%',
      trend: 'down',
      period: 'vs last month',
      target: '$85K',
      progress: 92
    },
    {
      title: 'Conversion Rate',
      value: '23%',
      change: '+5%',
      trend: 'up',
      period: 'vs last month',
      target: '25%',
      progress: 92
    }
  ];

  const chartData = [
    {
      id: 'revenue_trend',
      title: 'Revenue Trend',
      type: 'line',
      description: 'Monthly revenue performance over the last 12 months',
      data: 'Line chart showing steady growth with recent acceleration'
    },
    {
      id: 'deal_pipeline',
      title: 'Deal Pipeline by Stage',
      type: 'funnel',
      description: 'Current pipeline distribution across sales stages',
      data: 'Funnel chart showing lead progression through sales stages'
    },
    {
      id: 'lead_sources',
      title: 'Lead Sources',
      type: 'pie',
      description: 'Breakdown of lead generation channels',
      data: 'Pie chart showing website (40%), referrals (25%), events (20%), other (15%)'
    },
    {
      id: 'sales_performance',
      title: 'Sales Rep Performance',
      type: 'bar',
      description: 'Individual sales rep performance comparison',
      data: 'Bar chart comparing revenue generated by each sales rep'
    },
    {
      id: 'customer_segments',
      title: 'Customer Segments',
      type: 'donut',
      description: 'Revenue distribution by customer segment',
      data: 'Donut chart showing Enterprise (60%), SMB (30%), Startup (10%)'
    },
    {
      id: 'forecast_accuracy',
      title: 'Forecast vs Actual',
      type: 'comparison',
      description: 'Forecast accuracy over time',
      data: 'Comparison chart showing predicted vs actual revenue'
    }
  ];

  const aiQuestions = [
    "Why did our conversion rate improve this month?",
    "Which lead sources are performing best?",
    "What's causing the decrease in average deal size?",
    "How can we accelerate our sales cycle further?",
    "Which customer segments should we focus on?",
    "What's our forecast accuracy trend?"
  ];

  const getTrendIcon = (trend: any) => {
    switch (trend) {
      case 'up': return <ArrowUp className="w-4 h-4 text-green-500" />;
      case 'down': return <ArrowDown className="w-4 h-4 text-red-500" />;
      default: return <Minus className="w-4 h-4 text-gray-500" />;
    }
  };

  const getTrendColor = (trend: any) => {
    switch (trend) {
      case 'up': return 'text-green-600';
      case 'down': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getChartIcon = (type: any) => {
    switch (type) {
      case 'line': return <LineChart className="w-8 h-8 text-blue-500" />;
      case 'bar': return <BarChart3 className="w-8 h-8 text-green-500" />;
      case 'pie':
      case 'donut': return <PieChart className="w-8 h-8 text-purple-500" />;
      default: return <BarChart3 className="w-8 h-8 text-gray-500" />;
    }
  };

  const handleAIQuery = () => {
    if (!aiQuery.trim()) return;
    
    const response = {
      question: aiQuery,
      answer: `Based on your data, ${aiQuery.toLowerCase()} shows interesting patterns. The AI analysis suggests this is related to improved lead qualification and faster decision-making processes.`,
      confidence: 87,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setAiResponses([...aiResponses, response]);
    setAiQuery('');
  };

  return (
    <div className="h-screen bg-gray-50 flex">
      {/* Main Reports Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                <BarChart3 className="w-8 h-8 mr-3 text-blue-600" />
                Reports & Analytics
              </h1>
              <p className="text-gray-600">Performance insights and data visualization</p>
            </div>
            <div className="flex items-center space-x-3">
              <select 
                value={selectedTimeframe} 
                onChange={(e) => setSelectedTimeframe(e.target.value)}
                className="border border-gray-300 rounded-md px-3 py-2 text-sm"
              >
                <option value="week">Last 7 days</option>
                <option value="month">Last 30 days</option>
                <option value="quarter">Last 90 days</option>
                <option value="year">Last year</option>
              </select>
              <button className="bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 flex items-center space-x-2">
                <RefreshCw className="w-4 h-4" />
                <span>Refresh</span>
              </button>
              <button className="border border-gray-300 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-50 flex items-center space-x-2">
                <Download className="w-4 h-4" />
                <span>Export</span>
              </button>
              <button className="border border-gray-300 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-50 flex items-center space-x-2">
                <Share className="w-4 h-4" />
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>

        {/* AI Narrative Block */}
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-blue-200 p-6">
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-blue-100 rounded-lg">
              <Brain className="w-6 h-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-xl font-semibold text-blue-900">{aiNarrative.summary}</h2>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-blue-700">AI Confidence:</span>
                  <span className="text-sm font-medium text-blue-800">{aiNarrative.confidence}%</span>
                  <div className="w-16 bg-blue-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full" 
                      style={{ width: `${aiNarrative.confidence}%` }}
                    ></div>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium text-blue-900 mb-2">Key Insights</h3>
                  <ul className="space-y-2">
                    {aiNarrative.insights.map((insight, index) => (
                      <li key={index} className="text-blue-800 text-sm flex items-start">
                        <span className="w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                        {insight}
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="font-medium text-blue-900 mb-2">AI Recommendations</h3>
                  <ul className="space-y-2">
                    {aiNarrative.recommendations.map((rec, index) => (
                      <li key={index} className="text-blue-800 text-sm flex items-start">
                        <Zap className="w-4 h-4 text-blue-600 mt-0.5 mr-2 flex-shrink-0" />
                        {rec}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* KPI Cards */}
        <div className="bg-white border-b border-gray-200 p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {kpiData.map((kpi, index) => (
              <div key={index} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium text-gray-600">{kpi.title}</h3>
                  {getTrendIcon(kpi.trend)}
                </div>
                <div className="mb-2">
                  <div className="text-2xl font-bold text-gray-900">{kpi.value}</div>
                  <div className={`text-sm font-medium ${getTrendColor(kpi.trend)}`}>
                    {kpi.change} {kpi.period}
                  </div>
                </div>
                <div className="mb-2">
                  <div className="flex items-center justify-between text-sm text-gray-600">
                    <span>Target: {kpi.target}</span>
                    <span>{kpi.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full ${
                        kpi.progress >= 90 ? 'bg-green-500' :
                        kpi.progress >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${kpi.progress}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Charts Grid */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {chartData.map((chart) => (
              <div key={chart.id} className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    {getChartIcon(chart.type)}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{chart.title}</h3>
                      <p className="text-sm text-gray-600">{chart.description}</p>
                    </div>
                  </div>
                  <button className="text-gray-400 hover:text-gray-600">
                    <Eye className="w-5 h-5" />
                  </button>
                </div>
                
                {/* Chart Placeholder */}
                <div className="h-64 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200 flex items-center justify-center">
                  <div className="text-center">
                    {getChartIcon(chart.type)}
                    <p className="text-gray-500 mt-2 text-sm">{chart.data}</p>
                  </div>
                </div>
                
                <div className="mt-4 flex items-center justify-between">
                  <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                    View Details
                  </button>
                  <button className="text-gray-600 hover:text-gray-800 text-sm">
                    Export Data
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Right Panel - Ask AI */}
      <div className="w-96 bg-white border-l border-gray-200 flex flex-col">
        <div className="border-b border-gray-200 p-4">
          <h3 className="font-semibold text-gray-900 flex items-center">
            <MessageSquare className="w-5 h-5 mr-2 text-blue-600" />
            Ask AI About the Data
          </h3>
          <p className="text-sm text-gray-600">Get insights and explanations about your reports</p>
        </div>
        
        {/* AI Query Builder */}
        <div className="p-4 border-b border-gray-200">
          <div className="space-y-3">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-2 block">Quick Questions</label>
              <div className="grid grid-cols-1 gap-2">
                {aiQuestions.slice(0, 3).map((question, index) => (
                  <button
                    key={index}
                    onClick={() => setAiQuery(question)}
                    className="text-left text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 p-2 rounded border border-blue-200"
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
            
            <div>
              <label className="text-sm font-medium text-gray-700 mb-2 block">Custom Query</label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={aiQuery}
                  onChange={(e) => setAiQuery(e.target.value)}
                  placeholder="Ask anything about your data..."
                  className="flex-1 border border-gray-300 rounded-md px-3 py-2 text-sm"
                  onKeyPress={(e) => e.key === 'Enter' && handleAIQuery()}
                />
                <button
                  onClick={handleAIQuery}
                  className="bg-blue-600 text-white px-3 py-2 rounded-md hover:bg-blue-700"
                >
                  <Send className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* AI Responses */}
        <div className="flex-1 overflow-y-auto p-4">
          {aiResponses.length === 0 ? (
            <div className="text-center py-8">
              <Brain className="w-12 h-12 text-gray-300 mx-auto mb-3" />
              <p className="text-gray-500 text-sm">Ask AI a question about your data to get started</p>
            </div>
          ) : (
            <div className="space-y-4">
              {aiResponses.map((response, index) => (
                <div key={index} className="space-y-3">
                  <div className="bg-blue-50 rounded-lg p-3">
                    <p className="text-sm text-blue-900 font-medium">{response.question}</p>
                    <span className="text-xs text-blue-600">{response.timestamp}</span>
                  </div>
                  <div className="bg-gray-50 rounded-lg p-3">
                    <div className="flex items-start space-x-2">
                      <Brain className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                      <div className="flex-1">
                        <p className="text-sm text-gray-800">{response.answer}</p>
                        <div className="flex items-center space-x-2 mt-2">
                          <span className="text-xs text-gray-600">Confidence:</span>
                          <span className="text-xs font-medium text-blue-600">{response.confidence}%</span>
                          <div className="w-12 bg-gray-200 rounded-full h-1">
                            <div 
                              className="bg-blue-600 h-1 rounded-full" 
                              style={{ width: `${response.confidence}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
        
        {/* More Questions */}
        <div className="border-t border-gray-200 p-4">
          <h4 className="font-medium text-gray-900 mb-3">Suggested Questions</h4>
          <div className="space-y-2">
            {aiQuestions.slice(3).map((question, index) => (
              <button
                key={index}
                onClick={() => setAiQuery(question)}
                className="w-full text-left text-sm text-gray-600 hover:text-blue-600 hover:bg-blue-50 p-2 rounded border border-gray-200"
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReportsWireframe;